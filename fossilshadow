#!/usr/bin/env python
import datetime
import math
import os
import sqlite3
import sys

def print_usage():
	print '''	Usage: fossilshadow [repo] [bare-repo-name]
The repository shadow is created with "fossil init". Parameters compatible with
"fossil init" can be specified by prepending them to the repository path in
[repo].'''

def get_config(repo):
	"""
Searches a repository's 'config' table for specific configuration settings, and
if they exist, return a list of tuples, where each tuple contains corresponds
to a configuration setting read from the repository.
	"""
	db = sqlite3.connect(repo)
	cursor = db.cursor()
	cursor.execute("""
		SELECT * FROM config
		WHERE name = 'project-name'
		OR name = 'project-description'
		OR name = 'index-page'
		""")
	tuples = cursor.fetchall()
	db.close()
	return tuples

def get_first_commit_date(repo):
	db = sqlite3.connect(repo)
	cursor = db.cursor()
	cursor.execute("""
		SELECT mtime FROM event
		WHERE type = 'ci'
		AND comment = 'initial empty check-in';
		""")
	event_tuple = cursor.fetchone()
	julian_date_time = event_tuple[0]
	db.close()
	return julian_date_to_iso_8061(julian_date_time)

def get_project_code(repo):
	db = sqlite3.connect(repo)
	cursor = db.cursor()
	cursor.execute("""
		SELECT value FROM config
		WHERE name = 'project-code';
		""")
	project_tuple = cursor.fetchone()
	project_code = project_tuple[0]
	print 'project_code:', project_code
	db.close()
	return project_code

def julian_date_to_iso_8061(julian_date):
	julian_date = julian_date + 0.5

	F, I = math.modf(julian_date)
	I = int(I)

	A = math.trunc((I - 1867216.25)/36524.25)

	if I > 2299160:
		B = I + 1 + A - math.trunc(A / 4.)
	else:
		B = I

	C = B + 1524
	D = math.trunc((C - 122.1) / 365.25)
	E = math.trunc(365.25 * D)
	G = math.trunc((C - E) / 30.6001)

	day = C - E + F - math.trunc(30.6001 * G)

	if G < 13.5:
		month = G - 1
	else:
		month = G - 13

	if month > 2.5:
		year = D - 4716
	else:
		year = D - 4715

	hour_float = 24 * (day - int(day))
	minute_float = 60 * (hour_float - int(hour_float))
	second_float = 60 * (minute_float - int(minute_float))

	return datetime.datetime(year,
		month,
		int(day),
		int(hour_float),
		int(minute_float),
		int(second_float)).isoformat(' ')

def set_config(repo, configs):
	"""
Insert tuples into the 'config' table of a repository. The argument 'configs'
should be a list of tuples, where each tuple contains data to be inserted into
the repository.
	"""
	db = sqlite3.connect(repo)
	cursor = db.cursor()
	cursor.executemany("""
		INSERT into config(name, value, mtime)
		VALUES(?, ?, ?)
		""", configs)
	db.commit()
	db.close()

def set_project_code(repo, project_code):
	db = sqlite3.connect(repo)
	cursor = db.cursor()
	cursor.execute("""
		UPDATE config SET value = ?
		WHERE name = 'project-code';
		""", (project_code,))
	db.commit()
	db.close()

def main(argv):
	if len(argv) < 3:
		print_usage()
		sys.exit(1)

	# Extract last 2 arguments as repo paths
	repo_path = argv[len(argv) - 2]
	shadow_repo_path = argv[len(argv) - 1]
	argv = argv[1:-2]

	first_commit_date = get_first_commit_date(repo_path)
	project_code = get_project_code(repo_path)

	cmd = 'fossil init --date-override "' + first_commit_date + '" '

	for arg in argv:
		cmd = cmd + arg + ' '

	cmd = cmd + '"' + shadow_repo_path + '"'
	print "cmd: ", cmd
	return_value = os.system(cmd)
	if return_value != 0:
		print 'Error: the command'
		print '\t', cmd
		print 'returned with exit code', return_value
		return return_value

	set_project_code(shadow_repo_path, project_code)

if __name__ == '__main__':
	main(sys.argv)
